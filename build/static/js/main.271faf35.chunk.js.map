{"version":3,"sources":["serviceWorker.js","homePage/homePageReducer.js","config.js","app/reducers.js","api/firebaseApi/fbConfig.js","homePage/homePage.js","assigner/assigner.js","assigner/assignerActions.js","app/App.js","api/firebaseApi/fbActions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","index","homePageReducer","state","action","type","Object","assign","payload","configFile","combineReducers","homePage","require","Config","fbConfig","firebase","initializeApp","firestore","HomePage","className","style","fontFamily","paddingTop","display","justifyContent","color","fontSize","marginBottom","to","Button","backgroundColor","borderRadius","borderColor","height","width","paddingLeft","Assign","dispatch","useDispatch","assignment","useSelector","useEffect","pushState","pushAction","App","synced","fb","consent","rel","href","path","exact","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"utCAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BClBFC,EAAe,CACjBC,MAAO,GAcIC,EAXW,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACxD,OAAQA,EAAOC,MACb,IAAK,uBACH,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAAEF,MAAOG,EAAOI,UAClD,IAAK,gBACH,OAAOF,OAAOC,OAAO,GAAIJ,EAAOC,EAAOI,SACzC,QACE,OAAOL,ICMXM,GCGgBC,YAAgB,CAChCC,SAAUT,IDJGU,EAAQ,MAGrBH,EAAU,YAMCI,MAHFJ,EAAU,W,QEdjBK,G,4BAAWD,EAAM,UAGvBE,IAASC,cAAcF,GAGvBC,IAASE,YAiBMF,EAAf,E,6CC6DeG,EAtFE,WAWb,OACE,yBAAKC,UAAU,MACb,yBACEC,MAAO,CACLC,WAAY,kBACZC,WAAY,MACZC,QAAS,OACTC,eAAgB,SAChBC,MAAO,QACPC,SAAU,SAPd,2CAuBA,yBACEP,UAAU,eACVC,MAAO,CACLG,QAAS,OACTC,eAAgB,SAChBG,aAAc,SAGhB,kBAAC,IAAD,CAAMC,GAAG,gBACP,kBAACC,EAAA,EAAD,CACET,MAAO,CACLU,gBAAiB,QACjBC,aAAc,OACdC,YAAa,QACbC,OAAQ,GACRC,MAAO,IACPR,SAAU,SAPd,SAUS,MAGVb,EAAM,SACL,kBAAC,IAAD,CACEe,GAAG,QACHR,MAAO,CACLe,YAAa,SAGf,kBAACN,EAAA,EAAD,CACET,MAAO,CACLU,gBAAiB,QACjBC,aAAc,OACdC,YAAa,QACbC,OAAQ,GACRC,MAAO,IACPR,SAAU,SAPd,eAcF,iCClFCU,EAAS,WACpB,IAAMC,EAAWC,cACXC,EAAaC,aAAY,SAACrC,GAAD,OAAWA,EAAMoC,WAAWA,cAO3D,OALAE,qBAAU,YACY,IAAhBF,GACFF,ECAK,CACLhC,KAAM,eACNqC,WAAW,EACXC,YAAY,ODAT,+BEKM,SAASC,IACpB,IAAMP,EAAWC,cACXO,EAASL,aAAY,SAACrC,GAAD,OAAWA,EAAM2C,GAAGD,UACjCL,aAAY,SAACrC,GAAD,OAAWA,EAAM4C,QAAQA,WAcjD,OATGlC,EAAM,eACC,EAIZ4B,qBAAU,WACNJ,EC/BG,CACHhC,KAAM,YACNqC,WAAU,EACVC,YAAW,ODgCX,kBAAC,IAAD,KACE,0BAAMK,IAAI,aAAaC,KAAK,6CAC5B,0BACED,IAAI,aACJC,KAAK,iDAEP,0BACED,IAAI,aACJC,KAAK,oDAEP,0BACED,IAAI,aACJC,KAAK,uFAENJ,EACC,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,SAKN,+BEvCCC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,kBAAC,IAAMC,WAAP,KACE,kBAACb,EAAD,U","file":"static/js/main.271faf35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n  \nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n}  ","const initialState = {\n    index: 0,\n  };\n  \n  const homePageReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"homePage/UPDATEINDEX\":\n        return Object.assign({}, state, { index: action.payload });\n      case \"homePage/SYNC\":\n        return Object.assign({}, state, action.payload);\n      default:\n        return state;\n    }\n  };\n  \nexport default homePageReducer;","/*\nTo add config to a file add the following line in the imports:\n\nimport Config from \"../config\"\n\nThe config exported by this file has the following structure:\n\n\"Config\":{\n    \"timers\": bool,\n    \"pfButton\": bool,\n    \"routeProtect\": bool\n    \"firebase\": {} \n}\n\nbe sure to update this if you change the fields in config.json\n*/\n\nvar configFile = require(\"./config.json\")\n\nvar Config = {}\nif (configFile[\"isDebugMode\"] && process.env.NODE_ENV === \"development\"){\n    Config = configFile[\"debugConfig\"]\n} else {\n    Config = configFile[\"prodConfig\"]\n}\n\nexport default Config","import { combineReducers } from \"redux\";\n\n//Experiment handlers\n//import consentFormReducer from \"../consentForm/ConsentFormReducer\";\n\n// import onboardReducer from \"../onboardPage/onboardPageReducer\";\n//import fbReducer from \"../api/firebaseApi/fbReducer\"; //handle firebase middleware\n//import assignerReducer from \"../assigner/assignerReducer\"\n\nimport homePageReducer from \"../homePage/homePageReducer\";\n//import preSurveyReducer from \"../preSurvey/preSurveyReducer\";\n\n//import newSurveyFormReducer from \"../newSurveyForm/newSurveyFormReducer\";\n//import practiceReducer from \"../practice/practiceReducer\";\n\n//import con0Reducer from \"../con0/con0Reducer\";\n//import con1Reducer from \"../con1/con1Reducer\";\n\n//import verificationReducer from \"../verificationForm/VerificationReducer\";\n\nconst rootReducer = combineReducers({\n    homePage: homePageReducer,\n    //consent: consentFormReducer,\n    //assignment: assignerReducer,\n    //fb: fbReducer,\n    //preSurvey: preSurveyReducer,\n    // postSurvey: postSurveyReducer,\n    //newSurveyForm: newSurveyFormReducer,\n    // onboardPage: onboardReducer,\n    //practice: practiceReducer,\n    //con0: con0Reducer,\n    //con1: con1Reducer,\n    // con2: con2Reducer,\n    //verification: verificationReducer,\n  });\n  \nexport default rootReducer;\n  \n  \n\n\n","import Config from \"../../config\"\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/firestore\";\nimport { createFirestoreInstance } from \"redux-firestore\";\n\n// Firebase start\nconst fbConfig = Config[\"firebase\"]\n\n// Initialize firebase instance\nfirebase.initializeApp(fbConfig);\n\n// Initialize other services on firebase instance\nfirebase.firestore();\n\n// react-redux-firebase config\nconst rrfConfig = {\n  userProfile: \"users\",\n  useFirestoreForProfile: true,\n};\n\nexport const rrfProps = (store) => {\n    return {\n        firebase,\n        config: rrfConfig,\n        dispatch: store.dispatch,\n        createFirestoreInstance,\n    }\n};\n\nexport default firebase;\n","import Config from \"../config\";\n\nimport React from \"react\";\nimport \"./homePage.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\n\nconst HomePage = () => {\n    // const dispatch = useDispatch();\n  \n    // store Prolific ID\n    // const queryString = window.location.search.replace(\"?\", \"\").split(\"&\")[0].split(\"=\")[1];\n    // dispatch(getID(queryString));\n    // dispatch(getID(\"placeholder\"));\n  \n    // initialize the index of news \n    // dispatch(setnewsindex());\n  \n    return (\n      <div className=\"bg\">\n        <div \n          style={{\n            fontFamily: 'Times New Roman',\n            paddingTop: \"8em\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            color: \"white\",\n            fontSize: \"60px\",\n          }}\n          >Are you ready to create news headlines?</div>\n        {/* <div \n          style={{\n            // backgroundColor: \"black\",\n            // width: \"200px\",\n            // borderRadius: \"12px\",\n            // borderColor: \"white\",\n            paddingTop: \"3em\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            color: \"black\",\n            fontSize: \"50px\",\n          }}\n          >Are you ready for thinking with AI?</div>*/}\n        <div\n          className=\"fixed-bottom\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"6rem\",\n          }}\n        > \n          <Link to=\"/ConsentForm\">\n            <Button\n              style={{\n                backgroundColor: \"black\",\n                borderRadius: \"12px\",\n                borderColor: \"white\",\n                height: 60,\n                width: 230,\n                fontSize: \"25px\",\n              }}\n            >\n              Start {\">\"}\n            </Button>\n          </Link>\n          {Config[\"pfButton\"] ? (\n            <Link\n              to=\"/Menu\"\n              style={{\n                paddingLeft: \"2rem\",\n              }}\n            >\n              <Button\n                style={{\n                  backgroundColor: \"black\",\n                  borderRadius: \"12px\",\n                  borderColor: \"white\",\n                  height: 60,\n                  width: 230,\n                  fontSize: \"25px\",\n                }}\n              >\n                Developer?\n              </Button>\n            </Link>\n          ) : (\n            <div />\n          )}\n        </div>\n      </div>\n    );\n};\n\nexport default HomePage;\n  \n  \n  ","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAssignment } from \"./assignerActions\";\n\nexport const Assign = () => {\n  const dispatch = useDispatch();\n  const assignment = useSelector((state) => state.assignment.assignment);\n\n  useEffect(() => {\n    if (assignment === -1) {\n      dispatch(getAssignment());\n    }\n  });\n  return <div />;\n};","export const syncAssignment = (response) => {\n    return {\n      type: \"assigner/SYNC\",\n      payload: response,\n      pushState: false,\n      pushAction: false,\n    };\n  };\n  \n  export const getAssignment = () => {\n    return {\n      type: \"assigner/GET\",\n      pushState: false,\n      pushAction: false,\n    };\n  };\n  \n  export const setAssignment = (response) => {\n    return {\n      type: \"assigner/SET\",\n      payload: response,\n      pushState: false,\n      pushAction: false,\n    };\n  };\n  \n  export const getCountFail = () => {\n    return {\n      type: \"assigner/COUNTFAIL\",\n      pushState: false,\n      pushAction: true,\n    };\n  };  ","import Config from \"../config\";\n\nimport React, { useEffect } from \"react\";\nimport {\n  Navigate,\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { signIn } from \"../api/firebaseApi/fbActions\";\n\nimport HomePage from \"../homePage/homePage\";\nimport { Assign } from \"../assigner/assigner\";\n\n\nexport default function App() {\n    const dispatch = useDispatch();\n    const synced = useSelector((state) => state.fb.synced);\n    let consent = useSelector((state) => state.consent.consent);\n    // let submitted = useSelector((state) => state.postSurvey.submittedPost);\n    // let dev = false;\n    // const assignment = useSelector((state) => state.assignment.assignment);\n  \n    if (!Config[\"routeProtect\"]) {\n      consent = true;\n      // dev = true;\n    }\n  \n    useEffect(() => {\n        dispatch(signIn());\n      });\n    \n      return (\n        <Router>\n          <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\" />\n          <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Lato\"\n          />\n          <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Raleway\"\n          />\n          <link\n            rel=\"stylesheet\"\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n          />\n          {synced ? (\n            <div>\n              <Assign />\n              <Switch>\n                <Route path=\"/\" exact>\n                  <HomePage />\n                </Route>\n              </Switch>\n            </div>\n          ) : (\n            <div />\n          )}\n        </Router>\n      );\n    }        ","export const signIn = () => {\n    return {\n        type: 'fb/SIGNIN',\n        pushState:false,\n        pushAction:true\n    }\n}\n\nexport const signInSuccess = (response) => {\n    return {\n        type: 'fb/SIGNINSUCCESS',\n        payload: response,\n        pushState:false,\n        pushAction:true\n    }\n}\n\nexport const signInFailure = () => {\n    return {\n        type: 'fb/SIGNINFAIL',\n        pushState:false,\n        pushAction:true\n    }\n}\n\nexport const synced = () => {\n    return {\n        type: 'fb/SYNCED',\n        pushState:false,\n        pushAction:true\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport './index.html';\nimport * as serviceworker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./app/reducers\";\n\n//firebase imports\nimport { rrfProps } from \"./api/firebaseApi/fbConfig\";\nimport { pushToFireBase } from \"./api/firebaseApi/fbMiddle\";\nimport { getFirebase, ReactReduxFirebaseProvider } from \"react-redux-firebase\";\n\nimport App from \"./app/App\";\n// import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}